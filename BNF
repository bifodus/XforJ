#
# Copyright 2012 Joseph Spencer
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# =========================================================
#
# This is a non standard BNF that describes the XforJ grammar.  
#
# Character sequences not wrapped in ' are Non-Terminals.
#
# Non-Terminals may contain Terminals, Productions, and Non-Terminals.  
# Recursion is allowed.
#
# Non-Terminals ending in : are Productions in the grammar.
#
# Character sequences wrapped in ' are Terminals.
#
# The + symbol is used to concat Terminals and Non-Terminals.
#
# The character sequence @"Value" is used to provide an attribute to Symbols
# in the grammar.
#
# Regular expressions of the form /regex/ denote an acceptable sequence of 
# Terminals.  The regex flavor of choice is Perl.

Program:
   ProgramNamespace + ImportStatements@"Optional" + GlobalVariableDeclarations@"Optional" + GlobalStatements

ProgramNamespace:
   '{namespace ' + Namespace + '}'

Namespace:
   Name
   '.' + Namespace

Name:
   /[a-zA-Z][a-zA-Z_0-9]*/

ImportStatements:
   ImportStatement
   ImportStatements

ImportStatement:
   '{import ' + @"NonProtocolFilePath" + '}'

GlobalVariableDeclarations:
   GlobalVariableDeclaration
   GlobalVariableDeclarations

GlobalVariableDeclaration:
   '{variable ' + Name + GlobalVariableAssignment@"Optional" + '}'

GlobalVariableAssignment:
   ' ' + GlobalExpression

GlobalExpression:
   GlobalVariableValue
   GlobalExpression + Operator + GlobalVariableValue

GlobalVariableValue:
   /[0-9]*/
   '@' + Name
   /^((['"])((?:(?!\2)(?!\r?\n)(?:\\|\\\r?\n|\\\2|[^\r\n]))*+)\2).*+/@"String"
   null

Operator:
   '=='
   '==='
   '!='
   '!=='
   '||'
   '&&'
   '+'
   '-'
   '%'
   '*'
   '/'

GlobalStatements:
   TemplateDeclaration 
   GlobalStatements

TemplateDeclaration:
   '{template ' + Name + '}' + ParamDeclarations@"Optional" + VariableDeclarations@"Optional" + TemplateBody + '{/template}'

ParamDeclarations:
   ParamDeclaration
   ParamDeclarations + ParamDeclaration

ParamDeclaration:
   '{param ' + Name + VariableAssignment@"Optional" + '}'

VariableDeclarations:
   VariableDeclaration
   VaribleDeclarations + VariableDeclaration

VariableDeclaration:
   '{variable ' + Name + VariableAssignment@"Optional" + '}'

VariableAssignment:
   ' ' + VariableExpression

VariableExpression:
   VariableValue
   VariableExpression + Operator + VariableValue

VariableValue:
   GlobalVariableValue
   'count(' + ContextSelector + ')'
   'position()'
   'last()'
   ContextSelector

ContextSelector:
   Namespace
   'current()'
   ContextDynamicRefinement
   ContextSelector + ContextRefinements

ContextRefinements:
   ContextRefinement
   ContextRefinements + ContextRefinement

ContextRefinement:
   ContextStaticRefinement
   ContextDynamicRefinement

ContextStaticRefinement:
   '.' + NameSpace

ContextDynamicRefinement:
   '[' + ContextExpression + ']'

ContextExpression:
   VariableValue
   ContextExpression + Operator + VariableValue

TemplateBody:
   TemplateBodyStatements
   TemplateBodyStatements + TemplateBody

TemplateBodyStatements:
   InputTokens
   TextStatement
   PrintStatement
   IfStatement
   ChooseStatement
   ForEachStatement
   ApplyStatement
   TemplateBody

InputTokens:
   /[^{]*/

TextStatement:
   '{text}' + InputTokens + '{/text}'

PrintStatement:
   '{' + VariableExpression + '}'

IfStatement:
   '{if ' + VariableExpression + '}' + TemplateBody + '{/if}'

ChooseStatement:
   '{choose}' + WhenStatements@"Optional" + OtherwiseStatement + '{/choose}'

WhenStatements:
   WhenStatement
   WhenStatements + WhenStatement

WhenStatement:
   '{when ' + VariableExpression + '}' + TemplateBodyStatements + '{/when}'

OtherwiseStatement:
   '{otherwise}' + TemplateBodyStatements + '{/otherwise}'

ForEachStatement:
   '{foreach ' + ContextSelector + '}' + VariableDeclarations@"Optional" + TemplateBodyStatements + '{/foreach}'

ApplyStatement:
   '{apply ' + ContextSelector + '}' + ApplyParams@"Optional" + '{/apply}'

ApplyParams:
   ApplyParam
   ApplyParam + ApplyParams

ApplyParam:
   '{param ' + Name + Value + '}'